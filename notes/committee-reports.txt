UI
committee-reports container
|
|_ committee-reports
|  |_ committee-reports-agenda-item
|  |  |_ committee-reports-actions
|  |  |_ committee-reports-roll-call


API

- Navigation properties from committeReports to 
    committeeReportsAgendaItems

Data needed for Committee Report:
- Session
- Committee
- Meeting
- Is Published
- Published Date
- Addenda Date
- Attendance Published By
- Attendance Published Date
- Is Attendance Published
- Published Document
- Published Attendance Document

What I did so far:
- Make a new directory for committee report models

- Create a new model for CommitteeReportAgendaItem
    - this gets rid of the need for: 
        - CommitteeReportCommitteeActionToAgendaItem
        - CommitteeReportPublishedItems

- Create a new model for CommitteeReportAction
    - this gets rid of the need for: 
        - CommitteeReportCommitteeAction
        - CommitteeReportCommitteeActionToAgendaItem
        - CommitteeReportPublishedActions
    




Brians Notes:
so there's a few things that jump out just looking at the committee reports service:
just code smell, i just scroll through that file and think "it shouldn't be this complicated/complex"/1200+ lines seems like a lot to do all this
the recently added CommitteeReportPublishedActions table that is identical to the CommitteeReportCommitteeActionToAgendaItem table, just add a IsPublished flag to that and have all records in the one spot... now the code doesn't have to convert/clone objects to use them in the same spot (report generator), nor are two different queries necessary
Some sort of owning object for a CommitteeReport that has navigation properties for the other committee report data, so one query can be done to get all the data for a committee report
All the "new"ing up of objects converting data to dtos... not sure what the the aversion is to using automapper (yes i know it doesn't work in every scenario: ie merging more than one object into one), but constantly creating objects in numerous spots gives a much bigger window to mistakes/inconsistencies than having one definition of how to convert stuff
overall my approach, if i was doing this, was going to be to just design a new database schema based off everything we know about committee reports and work from there... this way i'm not influenced with how its already designed



----

        public CommitteeReportDto GetCommitteeReportDto(int sessionId, int committeeId, int meetingId, bool onlyPublished)
        {
            Session session = ValidateSession(sessionId);
            Committee committee = (committee = _sharedDb.Committee
                .FirstOrDefault(c =>
                    c.IsActive &&
                    c.SessionId == session.LsbId &&
                    c.Id == committeeId)) ?? throw new FileNotFoundException("Cannot find Committee");

            CommitteeMeeting meeting = _sharedDb.CommitteeMeeting
                .Include(cm => cm.CommitteeMeetingCommittee)
                    .ThenInclude(cmc => cmc.Committee)
                .FirstOrDefault(m =>
                    m.ChamberId == (int)M2Chambers.Senate &&
                    m.SessionId == session.LsbId &&
                    m.IsActive &&
                    m.Id == meetingId) ?? throw new FileNotFoundException("Cannot find meeting");

            HashSet<int> removedAgendaItems = _evaDb.CommitteeReportRemovedAgendaItems
                .Where(ri => ri.MeetingId == meetingId)
                .Select(ri => ri.AgendaItemId)
                .ToHashSet();

            CommitteeReportDto dto = new();
            CommitteeReport report = _evaDb.CommitteeReports
                .FirstOrDefault(r => r.MeetingId == meetingId && r.CommitteeId == committeeId);
            dto.AttendanceRecords = _attendanceService
                .GetMeetingAttendanceForMeeting(sessionId, committeeId, meetingId);
            dto.AgendaItems = _meetingService
                .GetCommitteeMeetingAgendaItems(sessionId, committeeId, meetingId, true, false)
                .Where(ai => !removedAgendaItems.Contains(ai.AgendaItemId.Value))
                .ToList();

            if (onlyPublished)
            {
                HashSet<int> publishedAgendaIds = _evaDb.CommitteeReportPublishedItems
                    .Where(pi => pi.MeetingId == meetingId)
                    .Select(pi => pi.AgendaItemId)
                    .ToHashSet();

                dto.AgendaItems = dto.AgendaItems
                    .Where(ai => ai.AgendaItemId.HasValue && publishedAgendaIds.Contains(ai.AgendaItemId.Value))
                    .ToList();

                List<CommitteeReportPublishedActions> publishedActions = _evaDb.CommitteeReportPublishedActions
                    .Where(pa => pa.MeetingId == meetingId)
                    .ToList();

                if (publishedActions != null && publishedActions.Any())
                {
                    foreach (CommitteeMeetingAgendaItemDto item in dto.AgendaItems)
                    {
                        if (item.Actions != null && item.Actions.Any())
                        {
                            item.Actions = item.Actions
                                .Where(a => publishedActions.Any(pa =>
                                    pa.AgendaItemId == item.AgendaItemId &&
                                    pa.CommitteeReportCommitteeActionId == (a.ActionId ?? 0)))
                                .ToList();
                        }
                    }
                }
            }

            // all actions for all agenda items
            List<CommitteeReportCommitteeActionToAgendaItem> agendaActions = _evaDb.CommitteeReportCommitteeActionToAgendaItems
                .Include(a => a.CommitteeReportCommitteeAction)
                .Where(a => a.MeetingId == meetingId)
                .ToList();
            // all rollcalls for all agenda items
            List<CommitteeMemberRollCall> agendaRollCalls = _evaDb.CommitteeMemberRollCalls
                .Where(a =>
                    dto.AgendaItems.Select(i => i.AgendaItemId).Contains(a.AgendaItemId) &&
                    dto.AttendanceRecords.Select(r => r.CommitteeMemberId).Contains(a.MemberId))
                .ToList();

            if (report != null)
            {
                dto.Id = report.Id;
                dto.IsPublished = report.IsPublished;
                dto.PublishedDate = report.PublishedDate;
                dto.IsAttendancePublished = report.IsAttendancePublished;
                dto.AttendancePublishedDate = report.AttendancePublishedDate;

                for (int i = 0; i < dto.AgendaItems.Count(); i++)
                {
                    CommitteeMeetingAgendaItemDto item = dto.AgendaItems.ElementAt(i);

                    item.Actions = agendaActions
                        .Where(a => a.AgendaItemId == item.AgendaItemId)
                        .Select(a => new CommitteeReportAgendaItemToActionDto
                        {
                            ActionId = a.CommitteeReportCommitteeActionId,
                            AgendaItemId = a.AgendaItemId,
                            Sub = a.Sub,
                            SortOrder = a.SortOrder,
                            CustomRecommendedAction = a.CustomRecommendedAction,
                            CustomReportOutAction = a.CustomReportOutAction,
                        })
                        .OrderBy(a => a.SortOrder)
                        .ToList();
                    if (agendaRollCalls == null || agendaRollCalls.Count == 0)
                    {
                        item.MemberRollCalls = dto.AttendanceRecords
                            .Select(a => new CommitteeMemberRollCallDto
                            {
                                MemberId = a.CommitteeMemberId,
                                MemberName = a.MemberName,
                                RoleCallVote = null
                            })
                        .ToList();
                    }
                    else
                    {
                        item.MemberRollCalls = agendaRollCalls
                            .Where(a => a.AgendaItemId == item.AgendaItemId)
                            .Select(a => new CommitteeMemberRollCallDto
                            {
                                MemberId = a.MemberId,
                                MemberName = dto.AttendanceRecords.FirstOrDefault(c => c.CommitteeMemberId == a.MemberId)?.MemberName,
                                RoleCallVote = a.RoleCallVote
                            })
                            .ToList();
                    }
                }
            }
            else
            {
                for (int i = 0; i < dto.AgendaItems.Count(); i++)
                {
                    CommitteeMeetingAgendaItemDto item = dto.AgendaItems.ElementAt(i);

                    item.MemberRollCalls = new List<CommitteeMemberRollCallDto>();
                    for (int y = 0; y < dto.AttendanceRecords.Count(); y++)
                    {
                        AttendanceRecordDto record = dto.AttendanceRecords.ElementAt(y);
                        CommitteeMemberRollCallDto committeeMemberRollCallDto = new()
                        {
                            MemberId = record.CommitteeMemberId,
                            MemberName = record.MemberName,
                            RoleCallVote = null,
                            AgendaItemDescription = item.Description,
                            AgendaItemIdentifier = item.Identifier,
                            AgendaItemPrefix = item.Prefix,
                        };
                        item.MemberRollCalls.Add(committeeMemberRollCallDto);
                    }
                }
            }

            dto.CommitteeName = committee.CommitteeName;
            dto.MeetingDate = meeting.MeetingDate;
            dto.MeetingTime = meeting.MeetingTime;
            dto.MeetingLocation = meeting.MeetingLocation;

            dto.JointCommittees = _meetingService
                .GetCommitteeMeetingJointCommittees(sessionId, committeeId, meetingId);
            return dto;
        }


        using EvaAPI.Data.M2.Models.Locations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EvaAPI.Data.M2.Models.Committees
{
    public class Committee : IModifiedInfo, IAddedDate
    {
        [Column("CommitteeID")]
        public int Id { get; set; }
        public int CommitteeTypeId { get; set; }
        public int SessionId { get; set; }
        public int ChamberId { get; set; }
        public int? ChairId { get; set; }
        public int? ClerkId { get; set; }
        public int? LocationId { get; set; }
        public string CommitteePhone { get; set; }
        public string CommitteeName { get; set; }
        public string IntegrationName { get; set; }
        public string NameCode { get; set; }
        public bool IsAfterSession { get; set; }
        public bool IsActive { get; set; }
        public bool IsPublic { get; set; }
        public int? CommitteeParentId { get; set; }
        public string MeetingDay { get; set; }
        public string MeetingTime { get; set; }
        public DateTime DateAdded { get; set; }
        public DateTime LastModified { get; set; }
        public string LastModifiedBy { get; set; }
        public string Website { get; set; }
        public int? ListServId { get; set; }
        public virtual CommitteeType CommitteeType { get; set; }
        public virtual ListServ ListServ { get; set; }
        [ForeignKey(nameof(CommitteeParentId))]
        public virtual Committee ParentCommittee { get; set; }
        public virtual ICollection<CommitteeMember> Members { get; set; }
        public virtual Location Location { get; set; }
        
    }
}
using EvaAPI.Data.Interfaces;
using EvaAPI.Data.M2.Models.Locations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EvaAPI.Data.M2.Models.Committees
{
    public class CommitteeMeeting : IAddedDate, IModifiedInfo
    {
        [Column("CommitteeMeetingID")]
        public int Id { get; set; }
        public int SessionId { get; set; }
        public int ChamberId { get; set; }
        public DateTime MeetingDate { get; set; }
        public string MeetingTime { get; set; }
        public string MeetingLocation { get; set; }
        public int? LocationId { get; set; }
        public string MeetingNotes { get; set; }
        public int? MeetingStatusTypeID { get; set; }
        public bool IsPublished { get; set; }
        public DateTime? DatePublished { get; set; }
        public int? ChairId { get; set; }
        public string ChairCode { get; set; }
        public int? ClerkId { get; set; }
        public bool IsJointCommittee { get; set; }
        public int SameDaySortOrder { get; set; }
        public bool IsAfterSession { get; set; }
        public bool AOBLanguageUsed { get; set; }
        public bool IsPublic { get; set; }
        public bool IsEditing { get; set; }
        public DateTime DateAdded { get; set; }
        public DateTime LastModified { get; set; }
        public string LastModifiedBy { get; set; }
        public bool IsActive { get; set; }
        public virtual Location Location { get; set; }
        public virtual UserProfile Clerk { get; set; }
        public virtual ICollection<CommitteeMeetingCommittee> CommitteeMeetingCommittee { get; set; }
        public virtual ICollection<CommitteeMeetingAgendaItem> CommitteeMeetingAgendaItems { get; set; }
    }
}


using EvaAPI.Data.Common;

namespace EvaAPI.Data.Models.Committees
{
    public class CommitteeReport : TrackableEntity
    {
        public int SessionId { get; set; }
        public int CommitteeId { get; set; }
        public int MeetingId { get; set; }
        public bool IsPublished { get; set; }
        public DateTime? PublishedDate { get; set; }
        public DateTime? AddendaDate { get; set; }
        public string PublishedBy { get; set; }
        public string AttendancePublishedBy { get; set; }
        public bool IsAttendancePublished { get; set; }
        public DateTime? AttendancePublishedDate { get; set; }
        public byte[] PublishedReportDocument { get; set; }
        public byte[] PublishedAttendanceReportDocument { get; set; }
    }
}
namespace EvaAPI.Data.Models.Committees
{
    public class CommitteeReportPublishedActions 
    {
        public int Id { get; set; }
        public int MeetingId { get; set; }
        public int AgendaItemId { get; set; }
        public string Sub { get; set; }
        public int SortOrder { get; set; }
        public int? CommitteeReportCommitteeActionId { get; set; }
        public string CustomReportOutAction { get; set; }
        public string CustomRecommendedAction { get; set; }
        public virtual CommitteeReportCommitteeAction CommitteeReportCommitteeAction { get; set; }
    }
}
namespace EvaAPI.Data.Models.Committees
{
    public class CommitteeReportCommitteeActionToAgendaItem
    {
        public int Id { get; set; }
        public int MeetingId { get; set; }
        public int AgendaItemId { get; set; }
        public string Sub { get; set; }
        public int SortOrder { get; set; }
        public int? CommitteeReportCommitteeActionId { get; set; }
        public string CustomReportOutAction { get; set; }
        public string CustomRecommendedAction { get; set; }
        public virtual CommitteeReportCommitteeAction CommitteeReportCommitteeAction { get; set; }
    }
}
using EvaAPI.Data.Common;

namespace EvaAPI.Data.Models.Reports
{
    public class CommitteeMemberRollCall : TrackableEntity
    {
        public int SessionId { get; set; }
        public int CommitteeId { get; set; }
        public int MeetingId { get; set; }
        public int MemberId { get; set; }
        public int AgendaItemId { get; set; }
        public string RoleCallVote { get; set; }
        public DateTime? PublishedDate { get; set; }
        public DateTime? AddendaDate { get; set; }
        public string PublishedBy { get; set; }
    }
}

There are two db's here, shared and eva

eva is the application I'm working with it is part of an ecosystem of apps that 
share the shared db.
I need to refactor the committee reports service to make it more efficient and
easier to read and easier to maintain.
I want to start by creating a new database schema based off everything we know
about committee reports and work from there.
The committee report model is the model that I need to start with.

Output five options for how I could rewrite the model such that it would 
make querying for a committee report achievable in a single query.

I will choose from these options as I refactor the committee reports service.
